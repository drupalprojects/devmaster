<?php

include_once('devshop_cloud.drush.inc');

/**
 * Implements hook_menu()
 */
function devshop_cloud_menu(){
  $items = array();
  $items['admin/devshop/cloud'] = array(
    'title' => 'Cloud',
    'description' => 'Configure cloud providers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_cloud_settings_form'),
    'access arguments' => array('administer devshop cloud'),
    'file' => 'settings.php',
    'file path' => drupal_get_path('module', 'devshop_cloud') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_perm()
 */
function devshop_cloud_perm() {
  return array(
    'administer devshop cloud'
  );
}

/**
 * Expose a type of service to the Service API.
 *
 * Return a new type of service (such as http, dns, db etc.) to
 * the service API.
 *
 * This information will be used to display the server node form,
 * allowing you to create services of this type.
 *
 * Just defining a service type without any implementations of it,
 * will automatically provide the "None" implementation.
 *
 * You will then need to create a new file in the same directory
 * as your module named "$module.service.inc, containing at
 * least a single class named "provisionService_$service", which
 * extends the base provisionService class.
 *
 * @see hosting_server_services()
 * @return
 *    an associative array with the index declaring the service
 *    type, and containing another associative array of properties.
 *    At present only the 'title' property is required for display
 *    of the server node form.
 */
function devshop_cloud_hosting_service_type() {
  return array(
    'provider' => array(
      'title' => 'Cloud Provider',
      'weight' => 0,
    ),
  );
}

/**
 * Implementation of hook_nodeapi()
 */
function devshop_cloud_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'server') {
    switch ($op) {
      case 'view':
        if ($node->services['provider']) {
          $node->content['info']['provider'] = array(
            '#type' => 'item',
            '#title' => t('Cloud Provider'),
            '#value' => $node->services['provider']->type,
            '#weight' => 0,
          );

          // Options
          $rows = array();
          foreach ($node->services['provider']->provider_options as $key => $value) {
            $rows[] = array($key, $value);
          }
          $node->content['info']['provider_options'] = array(
            '#type' => 'item',
            '#title' => t('Options'),
            '#value' => theme('table', array(), $rows),
            '#weight' => 22,
          );

          // Data
          $rows = array();
          foreach ($node->services['provider']->provider_data as $key => $value) {
            $rows[] = array($key, $value);
          }
          $node->content['info']['provider_data'] = array(
            '#type' => 'item',
            '#title' => t('Data'),
            '#value' => theme('table', array(), $rows),
            '#weight' => 23,
          );

          if ($node->services['provider']->provider_server_identifier) {
            $node->content['info']['provider_server_identifier'] = array(
              '#type' => 'item',
              '#title' => t('Server Identifier'),
              '#value' => $node->services['provider']->provider_server_identifier,
              '#weight' => 24,
            );
          }
        }
        break;
      case 'insert':
      case 'update':
        break;
      case 'delete' :
        break;
      case 'delete revision':
        break;
      case 'validate' :
        break;
      case 'load':
        break;
    }
  }
}
