<?php

/**
 * Implementation of hook_hosting_tasks()
 */
function aegir_features_hosting_tasks() {
    $tasks['site']['features_update'] = array(
        'title' => t('Recreate Features'),
        'description' => t('Run "features-update" or "features-update-all" on your site.'),
        'dialog' => TRUE,
        'icon' => 'refresh',
    );
    return $tasks;
}

/**
 * Implements hook_perm()
 * @return array
 */
function aegir_features_permission() {
    return array(
        'create features_update task' => array(
            'title' => t('create features_update task'),
            'description' => t('Create "features_update" task.'),
        ),
    );
}

/**
 * @return mixed
 */
function hosting_task_features_update_form($node) {
    if (_devshop_projects_site_has_module($node, 'features')) {
        drupal_set_message(t('The site must have the "features" module enabled to use this task.'));
        drupal_goto("node/{$node->nid}");
    }

    $form['note'] = array(
      '#markup' => t('This task will run <code>drush features-update</code> or <code>drush features-update-all</code>.'),
      '#prefix' => '<div class="alert alert-info">',
      '#suffix' => '</div>',
    );
    // @TODO: I can't get these options to pass to drush, so commenting out for now.
    $form['features'] = array(
        '#type' => 'textfield',
        '#title' => t('Features to update'),
        '#description' => '<p>' . t('Enter the names of the features modules you would like to recreate.  If left empty, all features will be updated.') . '</p>',
    );
    $form['revert'] = array(
        '#title' => t('Run a force revert after creating.'),
        '#type' => 'checkbox',
        '#default_value' => 1,
        '#description' => t('Once the features have been updated, run a forced revert. This can help avoid. This is recommended to keep this environment in the desired state.'),
    );
    return $form;
}

/**
 * Implements hook_devshop_environment_actions().
 *
 * Defines the list of tasks that appear under the gear icon.
 */
function aegir_features_devshop_environment_actions($environment)
{

    if ($environment->site && $environment->site_status == HOSTING_SITE_ENABLED) {
        $items[] = 'features_update';
        $items[] = '<div class="divider"></div>';
    }
    return $items;
}

/**
 * Implementation of hook_post_hosting_TASK_TYPE_task()
 * for Verify tasks.
 *
 * Runs the "verify" dotHook
 */
function aegir_features_post_hosting_features_update_task($task, $data) {

}

/**
 * Implements drush_hook_pre_hosting_task()
 *
 * Runs before the command "hosting-task" is run. Passes "task_args" from
 * the task node into "$task->options" which become drush options.
 */
function drush_aegir_features_pre_hosting_task()
{
    $task =& drush_get_context('HOSTING_TASK');
    if ($task->task_type != 'features_update') {
        return;
    }
    $task->options['features'] = $task->task_args['features'];
    $task->options['revert'] = $task->task_args['revert'];
}
