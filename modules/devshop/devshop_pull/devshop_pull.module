<?php
/**
 * @file devshop_pull.module
 *
 * Provides a project-wide webhook URL that passes to hosting_git's
 * platform-specific webhook code.
 *
 */

// The base URL to use for the Post Commit callback.
define('DEVSHOP_PULL_CALLBACK_URL', 'webhook');

/**
 * Implements hook_menu().
 */
function devshop_pull_menu() {
  $items[DEVSHOP_PULL_CALLBACK_URL] = array(
    'page callback' => 'devshop_pull_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * URL callback that is invoked by git to create a code pull task.
 */
function devshop_pull_callback($project_hosting_context, $hash) {
  
  module_load_include('webhook.inc', 'hosting_git_pull');
  
  // Load the project node & list of allowed IPs
  $project_node = hosting_context_load($project_hosting_context);
  $project = $project_node->project;
  
  // Make sure the security code is valid
  if (_hosting_git_pull_webhook_hash_create($project_node) != $hash) {
    $message = "Security code $hash is not valid!!!!";
    watchdog('devshop_git_pull', $message, array(), WATCHDOG_WARNING);
    header('HTTP/1.0 403 Forbidden');
    print $message;
    exit;
  }
  
  // Make sure host is allowed.
  // Load the node & list of allowed IPs.
  $allowed_ips = explode("\n", trim(variable_get('hosting_git_pull_webhook_ip_acl', HOSTING_GIT_WEBHOOK_DEFAULT_ALLOWED_IPS)));
  array_filter(array_map('trim', $allowed_ips));
  if (!hosting_git_pull_ip_match(ip_address(), $allowed_ips)) {
    $message = ip_address() . " is not authorized to invoke a Pull Code request.";
    $status = HOSTING_GIT_WEBHOOK_STATUS_ACCESS_DENIED;
    watchdog('devshop_git_pull', $message, array(), WATCHDOG_WARNING);
    header('HTTP/1.0 403 Forbidden');
    print $message;
    exit;
  }
  
  // Handle no envionments.
  if (empty($project->environments)) {
    $message ="Project {$project->name} has no envionments! Nothing to pull...";
    watchdog('devshop_git_pull', $message, array(), WATCHDOG_WARNING);
    print $message;
    exit;
  }
  
  // Load the code from hosting_git_pull and trigger the individual platforms' webhook URL.
  print "Environments found: " . implode(', ', array_keys($project->environments));
  
  foreach ($project->environments as $name => $environment) {
    $platform = node_load($environment->platform);
    $hash = _hosting_git_pull_webhook_hash_create($platform);
    
    // Only trigger git pull on Branch environments.
    if ($environment->git_ref_type == 'branch') {
      print "Environment $environment->name on branch $environment->git_ref \n\n";
      hosting_git_pull_callback($platform->hosting_name, $hash);
    }
    else {
      print "Environment $environment->name is on a $environment->git_ref_type \n\n";
    }
  }
}

/**
 * Create the full URL that is displayed in the project node view
 * and given to the GitHub WebHook to invoke a pull after a commit.
 */
function _devshop_pull_callback_url($node) {
  return url(DEVSHOP_PULL_CALLBACK_URL
    . '/' . $node->hosting_name
    . '/' . _hosting_git_pull_webhook_hash_create($node),
    array('absolute' => TRUE));
}